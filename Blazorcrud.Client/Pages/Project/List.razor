@page "/project/{Page}"
@inject Services.IProjectService ProjectService
@inject Services.IUserService UserService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Blazorcrud.Client.Shared.PageHistoryState PageHistoryState

<h1>Projects</h1>
<br/>

<div class="row mb-3">
    <div class="col-md-7">
        @if(!IsAdmin)
        { 
            <NavLink href="/project/createproject" class="btn btn-sm btn-success mb-2">Add Project</NavLink>
        }
    </div>
</div>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:25%">Name</th>
                <th style="width:35%">Description</th>
                <th style="width:25%">Created Date</th>
                <th style="width:20%">Assignee</th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects.Results)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>@project.CreatedAt</td>
                    @if (project.Assignee != null)
                    {
                        <td> @project.Assignee.FirstName+" "+@project.Assignee.LastName</td>
                    }
                    else
                    {
                        <td>Not Yet</td>
                    }
                    <td style="white-space: nowrap">
                        <NavLink href="@($"/project/viewproject/{project.Id}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                        @if (LoggedIn)
                        {
                            <NavLink href="@($"/project/updateproject/{project.Id}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>
                            @if (IsAdmin)
                            {
                                <button @onclick="@(() => DeleteProject(project))" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span class="spinner-border spinner-border-sm"></span>
                                </button>
                            }
                        }
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <Pager Result=@projects PageChanged=PagerPageChanged />
}

@code {
    [Parameter]
    public string Page { get; set;} = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    protected PagedResult<Project> projects;
    public bool LoggedIn
    {
        get { return UserService.User != null; }
    }
    public bool IsAdmin
    {
        get
        {
            if(UserService.User!=null)
            {
                return UserService.User.IsAdmin;
            }
            else
            {
                return false;
            }
        }
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        projects = await ProjectService.GetProjects(null, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            projects = await ProjectService.GetProjects(null, Page);
            return;
        }
        projects = await ProjectService.GetProjects(SearchTerm, Page);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        projects = await ProjectService.GetProjects(SearchTerm, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/project/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeleteProject(Project _project)
    {
        var project = _project;
        await ProjectService.DeleteProject(project.Id);
        projects = await ProjectService.GetProjects(null, Page);
        StateHasChanged();
    }
}