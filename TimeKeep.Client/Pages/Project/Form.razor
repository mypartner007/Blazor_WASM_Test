@inject TimeKeep.Client.Shared.PageHistoryState PageHistoryState
@inject Services.IUserService UserService

<EditForm Model="@project" OnValidSubmit="@OnValidSubmit">
    <FluentValidator TValidator="ProjectValidator" />
        <div class="form-group">
        <label>Name :</label>
        @if(IsAdmin){
            <div>
                <InputText @bind-Value="@project.Name" class="form-control col-sm-6" />
                <ValidationMessage For="@(() => project.Name)" />
            </div>
        }
        else
        {
            <p>@project.Name</p>
        }
        </div>
        <div class="form-group">
            <label>Description :</label>
            @if (IsAdmin)
            {
                <div>
                    <InputText @bind-Value="@project.Description" class="form-control col-sm-12" />
                    <ValidationMessage For="@(() => project.Description)" />
                </div>
            }
            else
            {
                <p>@project.Description</p>
            }
        </div>
        <div class="form-group">
            <label>Created Date :</label>
            @if (IsAdmin)
            {
                <div>
                    <InputDate @bind-Value="@project.CreatedAt" class="form-control col-sm-6" />
                    <ValidationMessage For="@(() => project.CreatedAt)" />
                </div>
            }
            else
            {
                <p>@project.CreatedAt</p>
            }
        </div>
        <div class="form-group">
            <label>Assignee :</label>
                @if (IsAdmin)
                {
                    <div>
                        <InputSelect @bind-Value:get="@project.AssigneeId"
                        @bind-Value:set="@((arg)=>SelectAssignee((int)arg))" class="form-control col-sm-6">
                            <option value="">Select an assignee </option>
                            @if (users != null)
                            {
                                foreach (var user in users.Results)
                                {
                                    <option value="@user.Id">@user.FirstName @user.LastName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                }
                else
                {
                    <p>@(project.Assignee == null ? "" : @project.Assignee.FirstName+" "+ @project.Assignee.LastName)</p>
                }
        </div>
            <h3>Time Track</h3>
        <div class="form-row">
            <div class="form-group col-md-3">
                <label>Date</label>
            </div>
            <div class="form-group col-md-3">
                <label>Hour</label>
            </div>
            <div class="form-group col-md-3">
                <label>Receipt</label>
            </div>
        </div>
    
    @if (project.Tracks != null)
    {
        <ValidationMessage For="@(() => project.Tracks)" />
        @foreach (var working in project.Tracks)
        {
            <div class="form-row">
                <div class="form-group col-md-3">
                    <InputDate id="Date" class="form-control" placeholder="Date" @bind-Value="working.Date" />
                    <ValidationMessage For="@(() => working.Date)" />
                </div>
                <div class="form-group col-md-3">
                    <InputNumber id="Hours" class="form-control" placeholder="Hours" @bind-Value="working.Hours" />
                    <ValidationMessage For="@(() => working.Hours)" />
                </div>
                <div class="form-group col-md-3">
                    <InputFile id="Receipt" accept=".json" type="file" class="form-control" OnChange="@((e)=>SelectFile(e, working))"/>
                    <ValidationMessage For="@(() => working.Receipt)" />
                </div>
                <div class="Form-group">
                    <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnWorkingDelete(project, working))">X</a>
                </div>
            </div>
        }
    }
    
    <div class="form-group">
        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnWorkingAdd(project))">Add Working</a>
    </div>
    <hr />
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/project/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public Project project { get; set; } 
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    protected PagedResult<User>  users = new PagedResult<User>();
    public bool IsAdmin
    {
        get
        {
            if (UserService.User != null)
            {
                return UserService.User.IsAdmin;
            }
            else
            {
                return false;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        users = await UserService.GetUsers(null, null);
    }
    public void OnWorkingDelete(Project project, Track working)
    {
        project.Tracks.Remove(working);
    }

    public void OnWorkingAdd(Project project)
    {
        if (project.Tracks == null)
        {
            project.Tracks = new List<Track>();
        }
        project.Tracks.Add(new Track { Date = new DateTime(), Hours = 0 });
    }
    protected void SelectAssignee(int id)
    {
        foreach(var user in users.Results)
        {
            if (user.Id == id)
            {
                project.AssigneeId = user.Id;
            }
        }
    }
    protected void SelectFile (InputFileChangeEventArgs e, Track track)
    {
        var id = project.Tracks.FindIndex(e=>e.Id==track.Id);
        project.Tracks[id].Receipt = e.File.ToString();

    }
}